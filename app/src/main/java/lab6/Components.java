/*
Name: Seren Dances
Date: 2/23/2023
Use case: counts number of components in a graph 
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab6;

import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

public class Components {
    
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        try {
            File f = new File(args[0]);
            Scanner sc = new Scanner(f);
            System.out.println(processFile(sc));
            System.out.println();
        } catch (FileNotFoundException exc) {
            System.out.println("Could not find file " + args[1]);
        }
    }  

    private static int processFile(Scanner sc) {
        // reading first line of file to get number of verticies
        int Verticies = sc.nextInt();
        sc.nextLine();

        // initilizing an adjacency matrix and a vertex map
        boolean[][] adjacencyMatrix = new boolean[Verticies][Verticies];
        Map<Integer, Integer> vertexMap = new HashMap<>();
        int vertexIndex = 0;

        // interating through the input file 
        // maping input to adjacency matrix
        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            if (line.isEmpty()) {
                continue; // skip empty lines
            }
            String[] parts = line.trim().split("\\s+");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            if (!vertexMap.containsKey(v1)) {
                vertexMap.put(v1, vertexIndex++);
            }
            if (!vertexMap.containsKey(v2)) {
                vertexMap.put(v2, vertexIndex++);
            }
            int v1Index = vertexMap.get(v1);
            int v2Index = vertexMap.get(v2);
            adjacencyMatrix[v1Index][v2Index] = true;
            adjacencyMatrix[v2Index][v1Index] = true; // since the graph is undirected
        }
        sc.close();

        // find the number of components with dfs
        boolean[] visited = new boolean[Verticies];
        int numComponents = 0;
        for (int i = 0; i < Verticies; i++) {
            if (!visited[i]) {
                dfs(adjacencyMatrix, visited, i);
                numComponents++;
            }
        }
        return numComponents;
    }

    // private method that does dfs
    private static void dfs(boolean[][] adjacencyMatrix, boolean[] visited, int vertex) {
        visited[vertex] = true;
        for (int i = 0; i < adjacencyMatrix.length; i++) {
            if (adjacencyMatrix[vertex][i] && !visited[i]) {
                dfs(adjacencyMatrix, visited, i);
            }
        }
    }
}
